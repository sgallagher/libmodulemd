# Document type identifier
# `document: modulemd-packager` describes the contents of a packager's input
# for a module stream. It is always a proper subset of a `document: modulemd`
# of the same `version`.
document: modulemd-packager
# Module metadata format version
version: 2
data:
    # A short summary describing the module, required
    summary: An example module
    # A verbose description of the module, required
    description: >-
        A module for the demonstration of the metadata format. Also,
        the obligatory lorem ipsum dolor sit amet goes right here.
    # Module and content licenses in the Fedora license identifier
    # format, required
    license:
        # Module license, required
        # This list covers licenses used for the module metadata and
        # possibly other files involved in the creation of this specific
        # module.
        module:
            - MIT
    # Module dependencies, if any.  Optional.
    # A list of dictionaries describing build and runtime dependencies
    # of this module.  Each list item describes a combination of dependencies
    # this module can be built or run against.
    # Dependency keys are module names, dependency values are lists of
    # required streams.  The lists can be both inclusive (listing compatible
    # streams) or exclusive (accepting every stream except for those listed).
    # An empty list implies all active existing streams are supported.
    # Requiring multiple streams at build time will result in multiple
    # builds.  Requiring multiple streams at runtime implies the module
    # is compatible with all of them.  If the same module streams are listed
    # in both the build time and the runtime block, the build tools translate
    # the runtime block so that it matches the stream the module was built
    # against.  Multiple builds result in multiple output modulemd files.
    # See below for an example.
    # TODO: Provides, conflicts, obsoletes, recommends, etc.
    #       Do we even need those?
    # The example below illustrates how to build the same module in four
    # different ways, with varying build time and runtime dependencies.
    dependencies:
        # Build on all available platforms except for f27, f28 and epel7
        # After build, the runtime dependency will match the one used for
        # the build.
        - buildrequires:
              platform: [-f27, -f28, -epel7]
          requires:
              platform: [-f27, -f28, -epel7]
        # For platform:f27 perform two builds, one with buildtools:v1, another
        # with buildtools:v2 in the buildroot.  Both will also utilize
        # compatible:v3.  At runtime, buildtools isn't required and either
        # compatible:v3 or compatible:v4 can be installed.
        - buildrequires:
              platform: [f27]
              buildtools: [v1, v2]
              compatible: [v3]
          requires:
              platform: [f27]
              compatible: [v3, v4]
        # For platform:f28 builds, require either runtime:a or runtime:b at
        # runtime.  Only one build is performed.
        - buildrequires:
              platform: [f28]
          requires:
              platform: [f28]
              runtime: [a, b]
        # For platform:epel7, build against against all available extras
        # streams and moreextras:foo and moreextras:bar.  The number of builds
        # in this case will be 2 * <the number of extras streams available>.
        # At runtime, both extras and moreextras will match whatever stream was
        # used for build.
        - buildrequires:
              platform: [epel7]
              extras: []
              moreextras: [foo, bar]
          requires:
              platform: [epel7]
              extras: []
              moreextras: [foo, bar]
    # References to external resources, typically upstream, optional
    references:
        # Upstream community website, if it exists, optional
        community: http://www.example.com/
        # Upstream documentation, if it exists, optional
        documentation: http://www.example.com/
        # Upstream bug tracker, if it exists, optional
        tracker: http://www.example.com/
    # Profiles define the end user's use cases for the module. They consist of
    # package lists of components to be installed by default if the module is
    # enabled. The keys are the profile names and contain package lists by
    # component type. There are several profiles defined below. Suggested
    # behavior for package managers is to just enable repository for selected
    # module. Then users are able to install packages on their own. If they
    # select a specific profile, the package manager should install all
    # packages of that profile.
    # Optional, defaults to no profile definitions.
    profiles:
        # The default profile, used unless any other profile was selected.
        # Optional, defaults to empty lists.
        default:
            rpms:
                - bar
                - bar-extras
                - baz
        # Defines a set of packages which are meant to be installed inside
        # container image artifact.
        # Optional.
        container:
            rpms:
                - bar
                - bar-devel
        # This profile provides minimal set of packages providing functionality
        # of this module. This is meant to be used on target systems where size
        # of the distribution is a real concern.
        # Optional.
        minimal:
            # A verbose description of the module, optional
            description: Minimal profile installing only the bar package.
            rpms:
                - bar
        # A set of packages which should be installed into the buildroot of a
        # module which depends on this module.  Specifically, it is used to
        # flesh out the build group in koji.
        # Optional.
        buildroot:
            rpms:
                - bar-devel
        # Very similar to the buildroot profile above, this is used by the
        # build system to specify any additional packages which should be
        # installed during the buildSRPMfromSCM step in koji.
        # Optional.
        srpm-buildroot:
            rpms:
                - bar-extras
    # Module API
    # Optional, defaults to no API.
    api:
        # The module's public RPM-level API.
        # A list of binary RPM names that are considered to be the
        # main and stable feature of the module; binary RPMs not listed
        # here are considered "unsupported" or "implementation details".
        # In the example here we don't list the xyz package as it's only
        # included as a dependency of xxx.  However, we list a subpackage
        # of bar, bar-extras.
        # Optional, defaults to an empty list.
        rpms:
            - bar
            - bar-extras
            - bar-devel
            - baz
            - xxx
    # Module component filters
    # Optional, defaults to no filters.
    filter:
        # RPM names not to be included in the module.
        # By default, all built binary RPMs are included.  In the example
        # we exclude a subpackage of bar, bar-nonfoo from our module.
        # Optional, defaults to an empty list.
        rpms:
            - baz-nonfoo
    # Functional components of the module, optional
    components:
        # RPM content of the module, optional
        # Keys are the VCS/SRPM names, values dictionaries holding
        # additional information.
        rpms:
            bar:
                # The real name of the package, if it differs from the key in
                # this dictionary. Used when bootstrapping to build a
                # bootstrapping ref before building the package for real.
                # Optional
                name: bar-real
                # Why is this component present.
                # A simple, free-form string.
                # Required.
                rationale: We need this to demonstrate stuff.
                # Use this repository if it's different from the build
                # system configuration.
                # Optional.
                repository: https://pagure.io/bar.git
                # Use this lookaside cache if it's different from the
                # build system configuration.
                # Optional.
                cache: https://example.com/cache
                # Use this specific commit hash, branch name or tag for
                # the build.  If ref is a branch name, the branch HEAD
                # will be used.  If no ref is given, the master branch
                # is assumed.
                # Optional.
                ref: 26ca0c0
                # Use the "buildafter" value to specify that this component
                # must be be ordered later than some other entries in this map.
                # The values of this array come from the keys of this map and
                # not the real component name to enable bootstrapping.
                # Use of both buildafter and buildorder in the same document is
                # prohibited, as they will conflict.
                # buildafter:
                #    - baz
                # Use the "buildonly" value to indicate that all artifacts
                # produced by this component are intended only for building
                # this component and should be automatically added to the
                # data.filter.rpms list after the build is complete.
                # Optional. Defaults to "false" if not specified.
                buildonly: false
                # If buildroot is set to True, the packages listed in this
                # module's buildroot profile will be installed into the
                # buildroot of any component built in subsequent
                # buildorder/buildafter batches, even if that module does not
                # explicitly include these packages in its BuildRequires.
                # Optional. Defaults to "false" if not specified.
                buildroot: false
                # If srpm-buildroot is set to True, the packages listed in this
                # module's srpm-buildroot profile will be installed into the
                # buildroot when performing the buildSRPMfromSCM step in
                # subsequent buildorder/buildafter batches.
                # Optional. Defaults to "false" if not specified.
                srpm-buildroot: false
            # baz has no extra options
            baz:
                rationale: This one is here to demonstrate other stuff.
            xxx:
                rationale: xxx demonstrates arches and multilib.
                # xxx is only available on the listed architectures.
                # Includes specific hardware architectures, not families.
                # See the data.arch field for details.
                # Optional, defaults to all available arches.
                arches: [i686, x86_64]
                # A list of architectures with multilib
                # installs, i.e. both i686 and x86_64
                # versions will be installed on x86_64.
                # Includes specific hardware architectures, not families.
                # See the data.arch field for details.
                # Optional, defaults to no multilib.
                multilib: [x86_64]
            xyz:
                rationale: xyz is a bundled dependency of xxx.
                # Build order group
                # When building, components are sorted by build order tag
                # and built in batches grouped by their buildorder value.
                # Built batches are then re-tagged into the buildroot.
                # Multiple components can have the same buildorder index
                # to map them into build groups.
                # Optional, defaults to zero.
                # Integer, negative values are allowed.
                # In this example, bar, baz and xxx are built first in
                # no particular order, then tagged into the buildroot,
                # then, finally, xyz is built.
                # Use of both buildafter and buildorder in the same document is
                # prohibited, as they will conflict.
                buildorder: 10
        # Module content of this module
        # Included modules are built in the shared buildroot, together with
        # other included content.  Keys are module names, values additional
        # component information.  Note this only includes components and their
        # properties from the referenced module and doesn't inherit any
        # additional module metadata such as the module's dependencies or
        # component buildopts.  The included components are built in their
        # defined buildorder as sub-build groups.
        # Optional
        modules:
            includedmodule:
                # Why is this module included?
                # Required
                rationale: Included in the stack, just because.
                # Link to VCS repository that contains the modulemd file
                # if it differs from the buildsystem default configuration.
                # Optional.
                repository: https://pagure.io/includedmodule.git
                # See the rpms ref.
                ref: somecoolbranchname
                # See the rpms buildorder.
                buildorder: 100
